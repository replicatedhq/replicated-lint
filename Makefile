LINT := ./bin/replicated-lint
PROJECT ?= replicated-entitlements

project-import:
	rm -rf src/projects/$(PROJECT)
	mkdir -p src/projects/$(PROJECT)
	node -e "var yaml = require('js-yaml'); var fs = require('fs'); fs.writeFileSync('src/projects/$(PROJECT)/rules.ts', '// THIS FILE IS AUTOGENERATED\n// tslint:disable\nexport default ' + JSON.stringify(yaml.safeLoad(fs.readFileSync('projects/$(PROJECT)/rules.yaml').toString())))"
	node -e "var yaml = require('js-yaml'); var fs = require('fs'); fs.writeFileSync('src/projects/$(PROJECT)/schema.ts', '// THIS FILE IS AUTOGENERATED\n// tslint:disable\nexport default ' + JSON.stringify(yaml.safeLoad(fs.readFileSync('projects/$(PROJECT)/schema.json').toString())))"
	node -e "var fs = require('fs'); fs.writeFileSync('src/projects/$(PROJECT)/index.ts', '// THIS FILE IS AUTOGENERATED\n// tslint:disable\nimport rules from \'./rules\'; import schema from \'./schema\'; export { rules, schema };')"

project-verify-rules:
	$(LINT) verify-rules --rules projects/$(PROJECT)/rules.yaml

project-generate-docs:
	$(LINT) docs gen --excludeDefaults --extraRules projects/$(PROJECT)/rules.yaml > ./projects/$(PROJECT)/docs-generated.md

project-validate-spec-good:
	$(LINT) validate --infile projects/$(PROJECT)/spec-good.yaml --excludeDefaults --threshold warn --schema projects/$(PROJECT)/schema.json --extraRules projects/$(PROJECT)/rules.yaml

project-validate-spec-bad:
	$(LINT) validate --infile projects/$(PROJECT)/spec-bad.yaml  --excludeDefaults --threshold warn --schema projects/$(PROJECT)/schema.json --extraRules projects/$(PROJECT)/rules.yaml
