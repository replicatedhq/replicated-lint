# Replicated YAML Lint Test Application
# CONTAINS: container with cluser_host_count min and max set to 1 on lines 151-153
---
replicated_api_version: 2.9.0
name: Replicated YAML Lint Test Application
version: "1.0.0"
release_notes: QA application meant for native scheduler installations.


###########################################################
# Host Requirements and Properties
###########################################################

host_requirements:
  replicated_version: ">=2.2.0 <=2.11.0"
  docker_version: "17.03.01-ce"
  cpu_cores: 1
  cpu_mhz: 1000
  memory: 2GB
  disk_space: 10GB
properties:
  app_url: http://{{repl ConfigOption "hostname" }}
  console_title: Replicated YAML Lint Test Application
  shell_alias: alphacli

###########################################################
# Snapshots
###########################################################

backup:
  enabled: true 

###########################################################
# Ready State Command
###########################################################

state:
  ready:
    command: http_status_code
    args:
    - http://{{repl ConfigOption "hostname"}}/assets/bootstrap.min.css
    - '200'
    timeout: 900

###########################################################
# Identity
###########################################################

identity:
  enabled: '{{repl if ConfigOptionNotEquals "auth_source" "auth_type_internal"}}true{{repl else}}false{{repl end}}'
  sources:
  - source: ldap
    enabled: '{{repl if ConfigOptionEquals "auth_source" "auth_type_ldap"}}true{{repl else}}false{{repl end}}'

###########################################################
# Monitors and Custom Metrics
###########################################################

monitors:
  cpuacct:
  - DB,redis
  - App,wlaoh/counter
  memory:
  - DB,redis
  - App,wlaoh/counter
  custom:
  - name: Disk Free (bytes) time 1 hour
    targets:
    - stats.gauges.myapp100.disk.*.free
    from: "-1hours"
    dashboard: "true"
    display:
      label_unit: B
      label_scale: metric
      label_count: 2
      fill_color: rgba(100, 0, 50, 0.5)
      stroke_color: "#ff1060"
  - name: Disk Free (%) time - default
    target: scale(divideSeries(stats.gauges.myapp100.disk.*.free,stats.gauges.myapp100.disk.*.total),100)
    dashboard: "true"
    display:
      label_unit: "%"
      label_scale: none
      label_count: 3
      label_min: 0
      label_max: 100
      label_range_override: true
  - name: Ping RTT time 30 minutes
    targets:
    - stats.gauges.myapp100.ping.*
    - movingAverage(stats.gauges.myapp100.ping.*,60)
    - movingAverage(stats.gauges.myapp100.ping.*,600)
    from: "-30minutes"
    dashboard: "true"
    display:
      label_unit: ms
      label_scale: none
statsd:
  port: 8891
graphite:
  port: 8891
custom_metrics:
- target: stats.gauges.myapp100.disk.*.*.*
  retention: "1s:10m,1m:4h,1h:30d"
  aggregation_method: "average"
  xfiles_factor: 0.3
- target: stats.gauges.myapp100.ping.*
  retention: "1s:10m,1m:4h,1h:30d"
  aggregation_method: "average"
  xfiles_factor: 0.3

###########################################################
# Commands
###########################################################

cmds:
- name: host_ip
  cmd: publicip
  args: []

###########################################################
# Admin Commands
###########################################################

admin_commands:
- alias: aliasecho
  command: ["echo"]
  run_type: exec
  component: DB
  container: redis
- alias: aliaschmod
  command: [chmod]
  run_type: exec
  component: LB
  container: wlaoh/nginx
- alias: aliasls
  command: [ls]
  run_type: exec
  component: App
  container: wlaoh/counter

###########################################################
# Components
###########################################################

components:
- name: DB
  cluster: true
  tags:
  - db
  cluster_host_count:
    min: 1
    max: 1
  containers:
  - source: public
    image_name: redis
    name: blah
    version: latest
    cmd: "[\"redis-server\", \"--appendonly\", \"yes\"]"
    publish_events:
    - name: Container redis started
      trigger: container-start
      data: ""
      subscriptions:
      - component: App
        container: wlaoh/counter
        action: start
    config_files: []
    customer_files: []
    env_vars: []
    ports: []
    volumes:
    - host_path: /data
      container_path: /data
    support_files: []
    restart:
      policy: on-failure
      max: 1000
- name: Temp
  containers:
  - source: replicated
    image_name: alpine
    version: latest
    ephemeral: true
    cmd: '["sleep", "10"]'
    name: "temp"
- name: LB
  cluster: true
  cluster_host_count:
    min: 1
    max: 0
  tags:
  - lb
  containers:
  - source: quay.io
    image_name: wlaoh/nginx
    version: latest
    cluster: true
    cluster_instance_count:
      initial: 1
    cmd: '["sh", "-c", "sleep 5 && nginx -g \"daemon off;\""]'
    publish_events:
    - name: Container wlaoh/nginx started
      trigger: container-start
      data: ""
      subscriptions: []
    config_files:
    - filename: /etc/nginx/conf.d/default.conf
      contents: |
        server {
          listen       80;
          server_name  localhost;

          location / {
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            proxy_pass http://{{repl HostPrivateIpAddress "App" "wlaoh/counter" }}:{{repl ContainerExposedPort "App" "wlaoh/counter" "3000" }};
          }
        }
    customer_files: []
    env_vars: []
    ports:
    - private_port: "80"
      public_port: "80"
      port_type: tcp
      when: ""
    volumes: []
    support_files: []
- name: App
  cluster: false
  containers:
  - source: public
    image_name: wlaoh/counter
    version: signed
    cmd: ""
    name: "counter"
    publish_events:
    - name: Container wlaoh/counter started
      trigger: container-start
      data: ""
      subscriptions:
      - component: LB
        container: wlaoh/nginx
        action: start
    config_files: []
    customer_files: []
    env_vars:
    - name: REDIS_HOST
      value: "{{repl HostPrivateIpAddress \"DB\" \"redis\" }}"
    - name: REDIS_PORT
      value: "{{repl ContainerExposedPort \"DB\" \"redis\" \"6379\" }}"
    - name: PASSWORD_BOX
      value: '{{repl ConfigOption "password_box" }}'
    ports: []
    volumes: []
    support_files: []
    restart:
      policy: always
- name: Statser
  cluster: false
  containers:
  - source: replicated
    image_name: statser
    version: signed
    content_trust:
      public_key_fingerprint: aa:9c:75:89:de:46:3a:92:08:c7:ba:9a:29:fb:12:cc
    publish_events:
    - name: Container statser started
      trigger: container-start
      data: ""
      subscriptions:
      - component: Temp
        container: alpine
        action: start
- name: Marathon
  cluster: true
  cluster_host_count:
    max: 2
    strategy: random
  containers:
  - source: public
    image_name: busybox
    version: 1.26.2
    when: false
    dynamic: true

###########################################################
# Config Settings
###########################################################

config:
- name: hostname
  title: Hostname
  description: Ensure this domain name is routable on your network.
  items:
  - name: hostname
    title: Hostname
    type: text
    recommended: false
    default: ""
    value_cmd:
      name: host_ip
      value_at: 0
    when: ""
    affix: ""
    required: false
    items: []
- name: qaconfigs
  title: QA Test Configurations
  description: These are only meant to test configuration options.
  items:
  - name: check_box_required
    title: Check Box Required
    help_text: When enabled should allow Replicated to start
    type: bool
    required: true
  - name: password_box
    title: Password Text
    help_text: What is typed in here will be an env var in the App container
    type: password
    required: true
    when: '{{repl ConfigOptionEquals "check_box_required" "1"}}'
  - name: phone_number
    type: text
    test_proc:
      run_on_save: true    
      display_name: Is this a Phone Number?
      command: regex_match
      args:
      - "([0-9]{3})[-]([0-9]{3})[-]([0-9]{4})$"
      - "That doesn't seem to be a phone number!"
- name: auth
  title: Authentication
  description: Where will user accounts be provisioned
  items:
  - name: auth_source
    default: auth_type_ldap
    type: select_one
    items:
    - name: auth_type_internal
      title: Built In
    - name: auth_type_ldap
      title: LDAP
- name: ldap_settings
  title: LDAP Server Settings
  when: auth_source=auth_type_ldap
  test_proc:
    display_name: Test Credentials
    command: ldap_auth
    arg_fields:
    - ldap_type
    - ldap_hostname
    - ldap_port
    - ldap_encryption
    - ldap_search_user
    - ldap_search_password
    - ldap_base_dn
    - ldap_usersearch_dn
    - ldap_restricted_user_group
    - ldap_username_field
    - ldap_login_username
    - ldap_login_password
    - ldap_advanced_search
    - ldap_user_query
    - ldap_restricted_group_query
  items:
  - name: ldap_type
    title: LDAP Server Type
    type: select_one
    default: ldap_type_openldap
    items:
    - name: ldap_type_openldap
      title: OpenLDAP
    - name: ldap_type_ad
      title: Active Directory
    - name: ldap_type_other
      title: Other
  - name: ldap_hostname
    title: Hostname
    type: text
    value: ad.replicated.com
    required: true
  - name: ldap_port
    title: Port
    type: text
    value: 389
    default: 389
    required: true
  - name: label_encryption_label
    title: Encryption Type
    type: label
  - name: ldap_encryption
    type: select_one
    default: ldap_encryption_plain
    items:
    - name: ldap_encryption_plain
      title: Plain
    - name: ldap_encryption_starttls
      title: StartTLS
    - name: ldap_encryption_ldaps
      title: LDAPS
  - name: ldap_search_user
    type: text
    value: CN=Administrator,CN=Users,DC=ad,DC=replicated,DC=com
    required: true
  - name: ldap_search_password
    title: Search password
    type: password
    value: Replicated1
    required: true
  - name: ldap_schema
    type: heading
    title: LDAP schema
  - name: ldap_base_dn
    title: Base DN
    type: text
    value: DC=ad,DC=replicated,DC=com
    required: true
  - name: ldap_usersearch_dn
    title: User search DN
    type: text
    value: CN=Users
    default: ou=users
    required: true
  - name: ldap_advanced_search
    title: Show Advanced Search Options
    description: Enable this option if you need to write a custom LDAP search query.
    type: bool
    value: 0
  - name: ldap_restricted_user_group
    title: Restricted User Group
    type: text
    value: Replicated
    required: false
    when: ldap_advanced_search=0
  - name: ldap_user_query
    title: User Query
    type: text
    value: '{{repl LdapCopyAuthFrom "UserQuery"}}'
    required: false
    when: ldap_advanced_search=1
  - name: ldap_restricted_group_query
    title: Restricted User Group Query
    type: text
    value: '{{repl LdapCopyAuthFrom "RestrictedGroupQuery"}}'
    required: false
    when: ldap_advanced_search=1
  - name: ldap_username_field
    title: Username field
    type: text
    value: sAMAccountName
    default: uid
    required: true
  - name: ldap_login_username
    title: Test username
    type: text
    required: false
  - name: ldap_login_password
    title: Test password
    type: password
    required: false

###########################################################
# Custom Preflight Checks
###########################################################

custom_requirements:
- id: os-release-file-exists
  message: OS release file exists (raw check)
  details: The OS release file must exist on the host at /etc
  results:
  - status: success
    message: File /etc/os-release exists.
    condition:
      status_code: 0
  - status: error
    message: File /etc/os-release does not exists.
    condition:
      status_code: 1
    # else error
  command:
    id: raw
    data:
      cmd: '["test", "-e", "/host/etc/os-release"]'
      port:
      - private_port: "8124"
        public_port: "8124"
        interface: docker0
        port_type: tcp
      volumes:
      - host_path: /etc/
        container_path: /host/etc/
        options: ["ro"]

- id: check-schema-version
  message: Database schema is at the correct version (scheduler check)
  details: The database schema must be at version 2
  results:
  - status: success # error, warn, success
    message: Schema is at version 2
    condition: # error, status_code, bool_expr
      status_code: 0 # and
      bool_expr: '{{repl Trim .Result | eq "2" }}' # template vars .StatusCode, .Result, .Results, .Error
  - status: error
    message: # it is possible to localize these messages
      id: custom_requirements[check-schema-version].results[1] # this is the default message id
      default_message: Schema is at incorrect version {{.version}}. Please upgrade your schema to version 2.
      args:
        version: '{{repl Trim .Result }}'
    condition: # error, status_code, bool_expr
      status_code: 0
  - status: warn
    message:
      default_message: Unexpected status {{.status_code}}
      args:
        status_code: '{{repl .StatusCode }}'
    # if no error: true condition is specified the check will fallback to the default error message
  command:
    id: scheduler
    timeout: 30 # in seconds, default to 15, -1 == no timeout
    data:
      component: DB # the component and container from the components section of the yaml
      container: redis
      cmd: "[\"sh\", \"-c\", \"echo 2\"]"
      config_files:
      - filename: /opt/check-schema-version.sql
        contents: |
          select version from schema limit 1;
      ports:
      - private_port: "8123"
        public_port: "8123"
        interface: docker0
        port_type: tcp

- id: port-available-lb-80
  message: Load balancer port is available (port check)
  details: Port 80 must be available for the load balancer.
  results:
  - status: success
    message: Port 80 is available
    condition:
      status_code: 0
  - status: error
    message: Port 80 is not available
    condition:
      status_code: 98
  - status: warn
    message:
      default_message: 'Invalid status code {{.status}}. ERROR: {{.error}}'
      args:
        status: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    # else error
  command:
    id: port_available
    data:
      port: '80'
      interface: docker0

- id: check-disk-space-available
  command:
    id: disk_space_available
    data:
      dir: /var/lib/replicated
  message: MESSAGE check-disk-space-available
  details: DETAILS check-disk-space-available
  results:
  - status: success
    message:
      default_message: SUCCESS check-disk-space-available {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      status_code: 0

- id: check-disk-space-total
  command:
    id: disk_space_total
    data:
      dir: /var/lib/replicated
  message: MESSAGE check-disk-space-total
  details: DETAILS check-disk-space-total
  results:
  - status: success
    message:
      default_message: SUCCESS check-disk-space-total {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      status_code: 0

- id: check-port-available-addrinuse
  command:
    id: port_available
    data:
      port: '8800'
      ip: '{{repl ThisNodePrivateIPAddress }}'
  message: MESSAGE check-port-available-addrinuse
  details: DETAILS check-port-available-addrinuse
  results:
  - status: warn
    message:
      default_message: ERROR check-port-available-addrinuse {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      error: true
      status_code: 98

- id: check-runoffline-false
  command:
    id: raw
    data:
      cmd: "[\"echo\", \" 2 \"]"
  message: MESSAGE check-runoffline-false
  details: DETAILS check-runoffline-false
  when: '{{repl eq RunOffline false }}'
  results:
  - status: success
    message:
      default_message: SUCCESS check-runoffline-false {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      status_code: 0

- id: check-runoffline-true
  command:
    id: raw
    data:
      cmd: "[\"echo\", \" 2 \"]"
  message: MESSAGE check-runoffline-true
  details: DETAILS check-runoffline-true
  when: '{{repl eq RunOffline true }}'
  results:
  - status: success
    message:
      default_message: SUCCESS check-runoffline-true {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      status_code: 0

- id: check-timeout
  command:
    id: raw
    timeout: 2
    data:
      entrypoint: ["sh", "-c"]
      cmd: "sleep 10"
  message: MESSAGE check-timeout
  details: DETAILS check-timeout
  results:
  - status: success
    message:
      default_message: TIMEOUT check-timeout {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      status_code: 62 # STATUS_CODE_ETIME
      error: true

- id: check-bind-docker0
  command:
    id: raw
    data:
      entrypoint: ["sh", "-c"]
      cmd: "[\"nc -l 0.0.0.0 8881& sleep 3 && nc -z {{repl ThisNodeDockerAddress }} 8883\"]"
      ports:
      - public_port: 8883
        private_port: 8881
        interface: docker0
  message: MESSAGE check-bind-docker0
  details: DETAILS check-bind-docker0
  results:
  - status: success
    message:
      default_message: SUCCESS check-bind-docker0 {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      status_code: 0

- id: check-bind-ip
  command:
    id: raw
    data:
      entrypoint: ["sh", "-c"]
      cmd: "[\"nc -l 0.0.0.0 8882& sleep 3 && nc -z {{repl ThisNodeDockerAddress }} 8884\"]"
      ports:
      - public_port: 8884
        private_port: 8882
        ip: '{{repl ThisNodeDockerAddress }}'
  message: MESSAGE check-bind-ip
  details: DETAILS check-bind-ip
  results:
  - status: success
    message:
      default_message: SUCCESS check-bind-ip {{.result}} {{.status_code}} {{.error}}
      args:
        result: '{{repl .Result }}'
        status_code: '{{repl .StatusCode }}'
        error: '{{repl .Error }}'
    condition:
      status_code: 0

