{
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "properties": {
    "specs": {
      "$ref": "#/properties/collect/properties/v1"
    },
    "analyze": {
      "description": "A list of analyzers to run on the collect spec",
      "type": "object",
      "properties": {
        "v1": {
          "description": "The v1 analyze definition",
          "type": "array",
          "items": {
            "description": "A list of analyzers to run on the collect spec",
            "type": "object",
            "properties": {
              "collect_refs": {
                "description": "Reference to a collect spec",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Selector to reference the meta.name of a collect spec",
                      "type": "string"
                    },
                    "ref": {
                      "description": "Used internally",
                      "type": "string"
                    },
                    "selector": {
                      "description": "Selector to reference the meta.labels of a collect spec",
                      "patternProperties": {
                        ".*": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "selector"
                  ]
                }
              },
              "kubernetes.total-memory": {
                "description": "Check that the total memory for a cluster meets the required minimum",
                "examples": [
                  {
                    "minimum": "20Gi"
                  }
                ],
                "type": "object",
                "properties": {
                  "minimum": {
                    "description": "The minimum total memory requirement",
                    "type": "string"
                  }
                },
                "required": [
                  "minimum"
                ]
              },
              "kubernetes.version": {
                "description": "Check that the total memory for a cluster meets the required minimum",
                "examples": [
                  {
                    "semver_minimum": "1.10.0"
                  }
                ],
                "type": "object",
                "properties": {
                  "semver_minimum": {
                    "description": "The minimum kubernetes version",
                    "type": "string"
                  }
                },
                "required": [
                  "semver_minimum"
                ]
              },
              "message": {
                "description": "Optionally override the default analyzer message",
                "type": "string"
              },
              "meta": {
                "description": "Can be used to organize and identify analyze elements",
                "type": "object",
                "properties": {
                  "labels": {
                    "description": "Key,value pairs used to organize and identify analyze elements",
                    "patternProperties": {
                      ".*": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Name used to organize and identify analyze elements",
                    "type": "string"
                  }
                }
              },
              "severity": {
                "description": "Optionally override the default severity",
                "type": "string"
              }
            },
            "required": []
          }
        }
      }
    },
    "collect": {
      "description": "A list of items to include in the support bundle",
      "type": "object",
      "properties": {
        "v1": {
          "description": "The v1 collect definition",
          "type": "array",
          "items": {
            "description": "A list of items to include in the support bundle",
            "type": "object",
            "properties": {
              "description": {
                "description": "A description of the file(s) that will be collected by this spec",
                "examples": [
                  "The contents of any files in /etc/supergoodtool/conf.d, with secrets redacted",
                  "Information about running Docker containers"
                ],
                "type": "string"
              },
              "docker.container-cp": {
                "description": "Collect a file by copying from a running docker container",
                "examples": [
                  {
                    "description": "the supergoodtool www site access logs",
                    "container": "supergoodtool-www",
                    "src_path": "/var/log/nginx/access.log",
                    "output_dir": "/www/access/"
                  },
                  {
                    "description": "the supergoodtool www site access logs",
                    "labels": [
                      "container.name.label"
                    ],
                    "src_path": "/var/log/nginx/access.log",
                    "output_dir": "/www/access/"
                  },
                  {
                    "description": "the supergoodtool www site access logs",
                    "labels": [
                      "container.name.label"
                    ],
                    "src_path": "/var/log/nginx/access.log",
                    "output_dir": "/www/access/",
                    "include_empty": true
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.Name}}",
                    "description": "Output will match the name of the file. If `src_path` is `/var/log/nginx/access.log`, then `output_dir` will contain a file `access.log`"
                  },
                  {
                    "path": "{{.Name}}",
                    "description": "Output will match the name of the file. If `src_path` is `/var/log/nginx/access.log`, then `output_dir` will contain a file `access.log`"
                  }
                ],
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The name of the container to copy from",
                    "example": "my-sweet-app",
                    "examples": [
                      "my-sweet-app"
                    ],
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "labels": {
                    "description": "Labels shared by the container(s) to copy from",
                    "example": [
                      "container.name.label"
                    ],
                    "examples": [
                      [
                        "container.name.label"
                      ],
                      [
                        "container.name.label=myContainerName"
                      ],
                      [
                        "container.name.label=myContainerName",
                        "cluster.name=primary"
                      ]
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "src_path": {
                    "description": "The path of the target file in the container's filesystem",
                    "example": "/var/log/supergoodtool/access.log",
                    "examples": [
                      "/var/log/supergoodtool/access.log"
                    ],
                    "type": "string"
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "src_path",
                  "output_dir"
                ],
                "oneOf": [
                  {
                    "required": [
                      "container"
                    ]
                  },
                  {
                    "required": [
                      "labels"
                    ]
                  }
                ]
              },
              "docker.container-exec": {
                "description": "Collect the stdout and stderr of `exec`-ing a command on a running docker container",
                "examples": [
                  {
                    "container": "supergoodtool-www",
                    "output_dir": "/www/debug/",
                    "exec_config": {
                      "Cmd": [
                        "nginx",
                        "-t"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "stdout.raw",
                    "description": "The standard output of the command"
                  },
                  {
                    "path": "stderr.raw",
                    "description": "The standard error of the command"
                  }
                ],
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The name of the container to run the command in",
                    "examples": [
                      "supergoodtool-www"
                    ],
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "exec_config": {
                    "description": "Same as would be passed to `docker exec`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/configs.go#L43)",
                    "type": "object",
                    "properties": {
                      "AttachStderr": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "AttachStdin": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "AttachStdout": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "Cmd": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "array",
                        "items": {
                          "description": "Same as would be passed to `docker exec`",
                          "type": "string"
                        }
                      },
                      "Detach": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "DetachKeys": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "string"
                      },
                      "Env": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "array",
                        "items": {
                          "description": "Same as would be passed to `docker exec`",
                          "type": "string"
                        }
                      },
                      "Privileged": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "Tty": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "User": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "string"
                      }
                    },
                    "required": [
                      "Cmd"
                    ]
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "container",
                  "exec_config"
                ]
              },
              "docker.container-inspect": {
                "description": "Collect the `docker inspect` output for one or more running or stopped containers. One of `container` or `container_list_options` is required.",
                "examples": [
                  {
                    "output_dir": "/containers/cooltool/www-stack",
                    "container_list_options": {
                      "All": true,
                      "Filters": {
                        "name": [
                          "www",
                          "nginx",
                          "dnsmasq"
                        ]
                      }
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.Name}}.json",
                    "description": "The json output of the inspect call. Will generate this file for each matched container"
                  }
                ],
                "type": "object",
                "properties": {
                  "container": {
                    "description": "the container name",
                    "type": "string"
                  },
                  "container_list_options": {
                    "description": "Options to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "object",
                    "properties": {
                      "All": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Before": {
                        "description": "Same as `--before` option to `docker logs` ",
                        "type": "string"
                      },
                      "Filters": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "additionalProperties": true,
                        "type": "object",
                        "properties": {
                          ".*": {
                            "description": "Map of key-value pairs to filter on",
                            "type": "array"
                          }
                        }
                      },
                      "Latest": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Limit": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "integer"
                      },
                      "Quiet": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Since": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "string"
                      },
                      "Size": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      }
                    },
                    "required": []
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "docker.container-logs": {
                "description": "Collect the stdout/stderr logs from one or more docker containers. One of `container` or `container_list_options` is required.",
                "examples": [
                  {
                    "output_dir": "/docker/cooltool/logs/www",
                    "container_list_options": {
                      "All": true,
                      "Filters": {
                        "name": [
                          "www",
                          "haproxy"
                        ]
                      }
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.Name}}.stdout",
                    "description": "The stdout logs. Will generate this file for each matched container"
                  },
                  {
                    "path": "{{.Name}}.stderr",
                    "description": "The stderr logs. Will generate this file for each matched container"
                  }
                ],
                "type": "object",
                "properties": {
                  "container": {
                    "description": "A container name",
                    "type": "string"
                  },
                  "container_list_options": {
                    "description": "Options to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "object",
                    "properties": {
                      "All": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Before": {
                        "description": "Same as `--before` option to `docker logs` ",
                        "type": "string"
                      },
                      "Filters": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "additionalProperties": true,
                        "type": "object",
                        "properties": {
                          ".*": {
                            "description": "Map of key-value pairs to filter on",
                            "type": "array"
                          }
                        }
                      },
                      "Latest": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Limit": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "integer"
                      },
                      "Quiet": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Since": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "string"
                      },
                      "Size": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      }
                    },
                    "required": []
                  },
                  "container_logs_options": {
                    "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)",
                    "type": "object",
                    "properties": {
                      "Details": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Follow": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStderr": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStdout": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Since": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Tail": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Timestamps": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Until": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      }
                    },
                    "required": []
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "docker.container-ls": {
                "description": "Collect information about one or more containers",
                "examples": [
                  {
                    "output_dir": "/docker/cooltool/containers/",
                    "All": true,
                    "Filters": {
                      "name": [
                        "www",
                        "haproxy"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "container_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "All": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "Before": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "string"
                  },
                  "Filters": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "additionalProperties": true,
                    "type": "object",
                    "properties": {
                      ".*": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "array"
                      }
                    }
                  },
                  "Latest": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "Limit": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "integer"
                  },
                  "Quiet": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "Since": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "string"
                  },
                  "Size": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "docker.container-run": {
                "description": "Collect the stderr/stdout of running a single docker container",
                "examples": [
                  {
                    "description": "Listing of host's network interfaces",
                    "output_dir": "/host/network",
                    "container_create_config": {
                      "Config": {
                        "Cmd": [
                          "ip",
                          "addr",
                          "show"
                        ],
                        "Image": "debian:latest"
                      },
                      "HostConfig": {
                        "AutoRemove": true,
                        "NetworkMode": "host"
                      }
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "stdout.raw",
                    "description": "The standard output of the container"
                  },
                  {
                    "path": "stderr.raw",
                    "description": "The standard error of the container"
                  }
                ],
                "type": "object",
                "properties": {
                  "container_create_config": {
                    "description": "Container create options as would be passed to `docker run`",
                    "type": "object",
                    "properties": {
                      "AdjustCPUShares": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "boolean"
                      },
                      "Config": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "object",
                        "properties": {
                          "ArgsEscaped": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "AttachStderr": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "AttachStdin": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "AttachStdout": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "Cmd": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Domainname": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Entrypoint": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Env": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "ExposedPorts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "object"
                              }
                            }
                          },
                          "Healthcheck": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              "Interval": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "Retries": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "StartPeriod": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "Test": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "array",
                                "items": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                }
                              },
                              "Timeout": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              }
                            }
                          },
                          "Hostname": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Image": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Labels": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "MacAddress": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "NetworkDisabled": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "OnBuild": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "OpenStdin": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "Shell": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "StdinOnce": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "StopSignal": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "StopTimeout": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Tty": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "User": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Volumes": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "object"
                              }
                            }
                          },
                          "WorkingDir": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          }
                        },
                        "required": [
                          "Image"
                        ]
                      },
                      "HostConfig": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "object",
                        "properties": {
                          "AutoRemove": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "Binds": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "BlkioDeviceReadBps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioDeviceReadIOps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioDeviceWriteBps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioDeviceWriteIOps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioWeight": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "BlkioWeightDevice": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "CapAdd": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "CapDrop": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Cgroup": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "CgroupParent": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "ConsoleSize": {
                            "description": "Container create options as would be passed to `docker run`"
                          },
                          "ContainerIDFile": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "CpuCount": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuPercent": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuPeriod": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuQuota": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuRealtimePeriod": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuRealtimeRuntime": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuShares": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpusetCpus": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "CpusetMems": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "DeviceCgroupRules": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Devices": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "object",
                              "properties": {
                                "CgroupPermissions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "PathInContainer": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "PathOnHost": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "PathOnHost",
                                "PathInContainer",
                                "CgroupPermissions"
                              ]
                            }
                          },
                          "DiskQuota": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Dns": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "DnsOptions": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "DnsSearch": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "ExtraHosts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "GroupAdd": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "IOMaximumBandwidth": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "IOMaximumIOps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Init": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "IpcMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Isolation": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "KernelMemory": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Links": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "LogConfig": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              "Config": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "object",
                                "properties": {
                                  ".*": {
                                    "description": "Container create options as would be passed to `docker run`",
                                    "type": "string"
                                  }
                                }
                              },
                              "Type": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            },
                            "required": [
                              "Type",
                              "Config"
                            ]
                          },
                          "Memory": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "MemoryReservation": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "MemorySwap": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "MemorySwappiness": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Mounts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "object",
                              "properties": {
                                "BindOptions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "object",
                                  "properties": {
                                    "Propagation": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "string"
                                    }
                                  }
                                },
                                "Consistency": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "ReadOnly": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "boolean"
                                },
                                "Source": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "Target": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "TmpfsOptions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "object",
                                  "properties": {
                                    "Mode": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "integer"
                                    },
                                    "SizeBytes": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "integer"
                                    }
                                  }
                                },
                                "Type": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "VolumeOptions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "object",
                                  "properties": {
                                    "DriverConfig": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "object",
                                      "properties": {
                                        "Name": {
                                          "description": "Container create options as would be passed to `docker run`",
                                          "type": "string"
                                        },
                                        "Options": {
                                          "description": "Container create options as would be passed to `docker run`",
                                          "type": "object",
                                          "properties": {
                                            ".*": {
                                              "description": "Container create options as would be passed to `docker run`",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "Labels": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "object",
                                      "properties": {
                                        ".*": {
                                          "description": "Container create options as would be passed to `docker run`",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "NoCopy": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "NanoCpus": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "NetworkMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "OomKillDisable": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "OomScoreAdj": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "PidMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "PidsLimit": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "PortBindings": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "array"
                              }
                            }
                          },
                          "Privileged": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "PublishAllPorts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "ReadonlyRootfs": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "RestartPolicy": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              "MaximumRetryCount": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "Name": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            },
                            "required": [
                              "Name",
                              "MaximumRetryCount"
                            ]
                          },
                          "Runtime": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "SecurityOpt": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "ShmSize": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "StorageOpt": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "Sysctls": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "Tmpfs": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "UTSMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Ulimits": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "UsernsMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "VolumeDriver": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "VolumesFrom": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          }
                        },
                        "required": []
                      },
                      "Name": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "string"
                      },
                      "NetworkingConfig": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "object",
                        "properties": {
                          "EndpointsConfig": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "required": [
                          "EndpointsConfig"
                        ]
                      }
                    },
                    "required": [
                      "Config"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "enable_pull": {
                    "description": "If `true`, allow this container to be pulled if not present",
                    "type": "boolean"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "container_create_config"
                ]
              },
              "docker.exec": {
                "description": "Collect the stdout/stderr of executing a command in an already running docker container",
                "examples": [
                  {
                    "container": "supergoodtool-www",
                    "output_dir": "/www/debug/",
                    "exec_config": {
                      "Cmd": [
                        "toolctl",
                        "info",
                        "--verbose"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "stdout.raw",
                    "description": "The standard output of the command"
                  },
                  {
                    "path": "stderr.raw",
                    "description": "The standard error of the command"
                  }
                ],
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The container name",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "exec_config": {
                    "description": "Config options as would be passed to `docker exec`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/configs.go)",
                    "type": "object",
                    "properties": {
                      "AttachStderr": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "AttachStdin": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "AttachStdout": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "Cmd": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "array",
                        "items": {
                          "description": "Same as would be passed to `docker exec`",
                          "type": "string"
                        }
                      },
                      "Detach": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "DetachKeys": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "string"
                      },
                      "Env": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "array",
                        "items": {
                          "description": "Same as would be passed to `docker exec`",
                          "type": "string"
                        }
                      },
                      "Privileged": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "Tty": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "boolean"
                      },
                      "User": {
                        "description": "Same as would be passed to `docker exec`",
                        "type": "string"
                      }
                    },
                    "required": [
                      "Cmd"
                    ]
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "container",
                  "exec_config"
                ]
              },
              "docker.image-ls": {
                "description": "Collect a list of docker images present on the server",
                "examples": [
                  {
                    "output_dir": "/cooltool/images/",
                    "All": true,
                    "Filters": {
                      "label": [
                        "com.supercooltool.app=supercooltool-enterprise"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "image_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "All": {
                    "description": "Same as would be passed to `docker images`",
                    "type": "boolean"
                  },
                  "Filters": {
                    "description": "Same as would be passed to `docker images`",
                    "additionalProperties": true,
                    "type": "object",
                    "properties": {
                      ".*": {
                        "description": "Same as would be passed to `docker images`",
                        "type": "array"
                      }
                    }
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "docker.images": {
                "description": "Collect a list of docker images present on the server",
                "examples": [
                  {
                    "output_dir": "/cooltool/images/",
                    "All": true,
                    "Filters": {
                      "label": [
                        "com.supercooltool.app=supercooltool-enterprise"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "image_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "All": {
                    "description": "Same as would be passed to `docker images`",
                    "type": "boolean"
                  },
                  "Filters": {
                    "description": "Same as would be passed to `docker images`",
                    "additionalProperties": true,
                    "type": "object",
                    "properties": {
                      ".*": {
                        "description": "Same as would be passed to `docker images`",
                        "type": "array"
                      }
                    }
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "docker.info": {
                "description": "Collect info about the Docker daemon",
                "examples": [
                  {
                    "output_dir": "/docker/daemon/",
                    "timeout_seconds": 10,
                    "description": "Info about the docker daemon"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "docker_info.json",
                    "description": "A pretty-printed JSON representation"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "docker.logs": {
                "description": "Collect the stdout/stderr logs from one or more docker containers. One of `container` or `container_list_options` is required.",
                "examples": [
                  {
                    "description": "The docker logs for all the containers labeled with com.supercooltool.onprem",
                    "output_dir": "/docker/logs",
                    "timeout_seconds": 100,
                    "container_list_options": {
                      "All": true,
                      "Filters": {
                        "label": [
                          "com.supercooltool.onprem=true"
                        ]
                      }
                    },
                    "container_logs_options": {
                      "Timestamps": true
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.Name}}.stdout",
                    "description": "The stdout logs. Will generate this file for each matched container"
                  },
                  {
                    "path": "{{.Name}}.stderr",
                    "description": "The stderr logs. Will generate this file for each matched container"
                  }
                ],
                "type": "object",
                "properties": {
                  "container": {
                    "description": "A container name",
                    "type": "string"
                  },
                  "container_list_options": {
                    "description": "Options to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "object",
                    "properties": {
                      "All": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Before": {
                        "description": "Same as `--before` option to `docker logs` ",
                        "type": "string"
                      },
                      "Filters": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "additionalProperties": true,
                        "type": "object",
                        "properties": {
                          ".*": {
                            "description": "Map of key-value pairs to filter on",
                            "type": "array"
                          }
                        }
                      },
                      "Latest": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Limit": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "integer"
                      },
                      "Quiet": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      },
                      "Since": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "string"
                      },
                      "Size": {
                        "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                        "type": "boolean"
                      }
                    },
                    "required": []
                  },
                  "container_logs_options": {
                    "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)",
                    "type": "object",
                    "properties": {
                      "Details": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Follow": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStderr": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStdout": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Since": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Tail": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Timestamps": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Until": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      }
                    },
                    "required": []
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "docker.node-ls": {
                "description": "Collect information about the nodes in a Docker Swarm installation",
                "examples": [
                  {
                    "description": "List of swarm nodes",
                    "output_dir": "/swarm/nodes/",
                    "Filters": {
                      "name": [
                        "cooltool-docker-swarm-"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "node_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "Filters": {
                    "description": "Same as would be passed to `docker node ls`",
                    "additionalProperties": true,
                    "type": "object",
                    "properties": {
                      ".*": {
                        "description": "Same as would be passed to `docker node ls`",
                        "type": "array"
                      }
                    }
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "docker.ps": {
                "description": "Collect information about containers",
                "examples": [
                  {
                    "output_dir": "/docker/ps/",
                    "All": true
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "container_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "All": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "Before": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "string"
                  },
                  "Filters": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "additionalProperties": true,
                    "type": "object",
                    "properties": {
                      ".*": {
                        "description": "Map of key-value pairs to filter on",
                        "type": "array"
                      }
                    }
                  },
                  "Latest": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "Limit": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "integer"
                  },
                  "Quiet": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "Since": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "string"
                  },
                  "Size": {
                    "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "docker.run": {
                "description": "Collect the stderr/stdout of running a single docker container",
                "examples": [
                  {
                    "description": "Listing of host's network interfaces",
                    "output_dir": "/host/network",
                    "container_create_config": {
                      "Config": {
                        "Cmd": [
                          "ip",
                          "addr",
                          "show"
                        ],
                        "Image": "debian:latest"
                      },
                      "HostConfig": {
                        "AutoRemove": true,
                        "NetworkMode": "host"
                      }
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "stdout.raw",
                    "description": "The standard output of the container"
                  },
                  {
                    "path": "stderr.raw",
                    "description": "The standard error of the container"
                  }
                ],
                "type": "object",
                "properties": {
                  "container_create_config": {
                    "description": "Same as would be passed to `docker run`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/configs.go#L13)",
                    "type": "object",
                    "properties": {
                      "AdjustCPUShares": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "boolean"
                      },
                      "Config": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "object",
                        "properties": {
                          "ArgsEscaped": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "AttachStderr": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "AttachStdin": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "AttachStdout": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "Cmd": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Domainname": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Entrypoint": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Env": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "ExposedPorts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "object"
                              }
                            }
                          },
                          "Healthcheck": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              "Interval": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "Retries": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "StartPeriod": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "Test": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "array",
                                "items": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                }
                              },
                              "Timeout": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              }
                            }
                          },
                          "Hostname": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Image": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Labels": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "MacAddress": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "NetworkDisabled": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "OnBuild": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "OpenStdin": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "Shell": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "StdinOnce": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "StopSignal": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "StopTimeout": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Tty": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "User": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Volumes": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "object"
                              }
                            }
                          },
                          "WorkingDir": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          }
                        },
                        "required": [
                          "Image"
                        ]
                      },
                      "HostConfig": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "object",
                        "properties": {
                          "AutoRemove": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "Binds": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "BlkioDeviceReadBps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioDeviceReadIOps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioDeviceWriteBps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioDeviceWriteIOps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "BlkioWeight": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "BlkioWeightDevice": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "CapAdd": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "CapDrop": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Cgroup": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "CgroupParent": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "ConsoleSize": {
                            "description": "Container create options as would be passed to `docker run`"
                          },
                          "ContainerIDFile": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "CpuCount": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuPercent": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuPeriod": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuQuota": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuRealtimePeriod": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuRealtimeRuntime": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpuShares": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "CpusetCpus": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "CpusetMems": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "DeviceCgroupRules": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "Devices": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "object",
                              "properties": {
                                "CgroupPermissions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "PathInContainer": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "PathOnHost": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "PathOnHost",
                                "PathInContainer",
                                "CgroupPermissions"
                              ]
                            }
                          },
                          "DiskQuota": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Dns": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "DnsOptions": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "DnsSearch": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "ExtraHosts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "GroupAdd": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "IOMaximumBandwidth": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "IOMaximumIOps": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Init": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "IpcMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Isolation": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "KernelMemory": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Links": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "LogConfig": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              "Config": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "object",
                                "properties": {
                                  ".*": {
                                    "description": "Container create options as would be passed to `docker run`",
                                    "type": "string"
                                  }
                                }
                              },
                              "Type": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            },
                            "required": [
                              "Type",
                              "Config"
                            ]
                          },
                          "Memory": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "MemoryReservation": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "MemorySwap": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "MemorySwappiness": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "Mounts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "object",
                              "properties": {
                                "BindOptions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "object",
                                  "properties": {
                                    "Propagation": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "string"
                                    }
                                  }
                                },
                                "Consistency": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "ReadOnly": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "boolean"
                                },
                                "Source": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "Target": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "TmpfsOptions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "object",
                                  "properties": {
                                    "Mode": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "integer"
                                    },
                                    "SizeBytes": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "integer"
                                    }
                                  }
                                },
                                "Type": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "string"
                                },
                                "VolumeOptions": {
                                  "description": "Container create options as would be passed to `docker run`",
                                  "type": "object",
                                  "properties": {
                                    "DriverConfig": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "object",
                                      "properties": {
                                        "Name": {
                                          "description": "Container create options as would be passed to `docker run`",
                                          "type": "string"
                                        },
                                        "Options": {
                                          "description": "Container create options as would be passed to `docker run`",
                                          "type": "object",
                                          "properties": {
                                            ".*": {
                                              "description": "Container create options as would be passed to `docker run`",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "Labels": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "object",
                                      "properties": {
                                        ".*": {
                                          "description": "Container create options as would be passed to `docker run`",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "NoCopy": {
                                      "description": "Container create options as would be passed to `docker run`",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "NanoCpus": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "NetworkMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "OomKillDisable": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "OomScoreAdj": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "PidMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "PidsLimit": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "PortBindings": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "array"
                              }
                            }
                          },
                          "Privileged": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "PublishAllPorts": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "ReadonlyRootfs": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "boolean"
                          },
                          "RestartPolicy": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              "MaximumRetryCount": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "integer"
                              },
                              "Name": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            },
                            "required": [
                              "Name",
                              "MaximumRetryCount"
                            ]
                          },
                          "Runtime": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "SecurityOpt": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          },
                          "ShmSize": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "integer"
                          },
                          "StorageOpt": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "Sysctls": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "Tmpfs": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "properties": {
                              ".*": {
                                "description": "Container create options as would be passed to `docker run`",
                                "type": "string"
                              }
                            }
                          },
                          "UTSMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "Ulimits": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array"
                          },
                          "UsernsMode": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "VolumeDriver": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "string"
                          },
                          "VolumesFrom": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "array",
                            "items": {
                              "description": "Container create options as would be passed to `docker run`",
                              "type": "string"
                            }
                          }
                        },
                        "required": []
                      },
                      "Name": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "string"
                      },
                      "NetworkingConfig": {
                        "description": "Container create options as would be passed to `docker run`",
                        "type": "object",
                        "properties": {
                          "EndpointsConfig": {
                            "description": "Container create options as would be passed to `docker run`",
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "required": []
                      }
                    },
                    "required": [
                      "Config"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "enable_pull": {
                    "description": "If `true`, allow this container to be pulled if not present",
                    "type": "boolean"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "container_create_config"
                ]
              },
              "docker.service-logs": {
                "description": "Collect logs from a docker swarm service. One of `service` or `service_list_options` is required.",
                "examples": [
                  {
                    "output_dir": "/swarm/services/www",
                    "service": "cooltool-www"
                  },
                  {
                    "output_dir": "/swarm/services/core-stack",
                    "service_list_options": {
                      "Filters": {
                        "name": [
                          "cooltool-www",
                          "cooltool-api",
                          "cooltool-worker"
                        ]
                      }
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.Name}}.stdout",
                    "description": "The stdout output of the logs call. Will generate this file for each matched service"
                  },
                  {
                    "path": "{{.Name}}.stderr",
                    "description": "The stderr output of the logs call. Will generate this file for each matched service"
                  }
                ],
                "type": "object",
                "properties": {
                  "container_logs_options": {
                    "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)",
                    "type": "object",
                    "properties": {
                      "Details": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Follow": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStderr": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStdout": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Since": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Tail": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Timestamps": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Until": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ShowStdout",
                      "ShowStderr",
                      "Since",
                      "Until",
                      "Timestamps",
                      "Follow",
                      "Tail",
                      "Details"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "service": {
                    "description": "A single docker swarm service for which to collect logs",
                    "type": "string"
                  },
                  "service_list_options": {
                    "description": "Options for filtering all swarm services",
                    "type": "object",
                    "properties": {
                      "Filters": {
                        "description": "Same as would be passed to `docker service ls`",
                        "additionalProperties": true,
                        "type": "object",
                        "properties": {
                          ".*": {
                            "description": "Same as would be passed to `docker service ls`",
                            "type": "array"
                          }
                        }
                      }
                    },
                    "required": [
                      "Filters"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [],
                "oneOf": [
                  {
                    "required": [
                      "service"
                    ]
                  },
                  {
                    "required": [
                      "service_list_options"
                    ]
                  }
                ]
              },
              "docker.service-ls": {
                "description": "Collect a list of docker swarm services",
                "examples": [
                  {
                    "output_dir": "/swarm/services/list/",
                    "description": "List of all services starting with `cooltool-`",
                    "Filters": {
                      "name": [
                        "cooltool-"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "service_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "Filters": {
                    "description": "Same as would be passed to `docker service ls`",
                    "additionalProperties": true,
                    "type": "object",
                    "properties": {
                      ".*": {
                        "description": "Same as would be passed to `docker service ls`",
                        "type": "array"
                      }
                    }
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "docker.service-ps": {
                "description": "Collect information about the tasks run by one or more services",
                "examples": [
                  {
                    "output_dir": "/swarm/services/www/tasks/",
                    "description": "List of all services starting with `cooltool-`",
                    "Filters": {
                      "name": [
                        "cooltool-"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "service_ps.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "Filters": {
                    "description": "Same as would be passed to `docker service ps`",
                    "additionalProperties": true,
                    "type": "object",
                    "properties": {
                      ".*": {
                        "description": "Same as would be passed to `docker service ps`",
                        "type": "array"
                      }
                    }
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "Filters"
                ]
              },
              "docker.stack-service-logs": {
                "description": "Collect logs from one or more services in a stack",
                "examples": [
                  {
                    "output_dir": "/swarm/stacks/cooltool/service-logs",
                    "description": "Logs from services in the cooltool stack",
                    "namespace": "cooltool-core"
                  },
                  {
                    "output_dir": "/swarm/stacks/cooltool/service-logs",
                    "description": "Logs from services in the cooltool stack",
                    "namespace": "cooltool-core",
                    "labels": {}
                  },
                  {
                    "output_dir": "/swarm/stacks/cooltool/service-logs",
                    "description": "Logs from services in the cooltool stack",
                    "namespace": "cooltool-core",
                    "labels": {
                      "com.replicated.excludelogs": "false",
                      "abc": "xyz",
                      "abc2": ""
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.StackName}}_{{.ServiceName}}.stdout",
                    "description": "The stdout output. Will generate this file for each matched service"
                  },
                  {
                    "path": "{{.StackName}}_{{.ServiceName}}.stderr",
                    "description": "The stderr output. Will generate this file for each matched service"
                  }
                ],
                "type": "object",
                "properties": {
                  "container_logs_options": {
                    "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)",
                    "type": "object",
                    "properties": {
                      "Details": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Follow": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStderr": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "ShowStdout": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Since": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Tail": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      },
                      "Timestamps": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "boolean"
                      },
                      "Until": {
                        "description": "Same as would be passed to `docker logs`",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ShowStdout",
                      "ShowStderr",
                      "Since",
                      "Until",
                      "Timestamps",
                      "Follow",
                      "Tail",
                      "Details"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "labels": {
                    "description": "A set of labels that must be present for the logs to be included",
                    "type": "object",
                    "patternProperties": {
                      ".*": {
                        "type": "string"
                      }
                    },
                    "properties": {
                      ".*": {
                        "type": "string"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "namespace": {
                    "description": "The stack's namespace",
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "service_list_options": {
                    "description": "Options as would be passed to `docker stack services",
                    "type": "object",
                    "properties": {
                      "Filters": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "array"
                          }
                        }
                      },
                      "description": {
                        "type": "string"
                      },
                      "include_empty": {
                        "type": "boolean"
                      },
                      "meta": {
                        "type": "object",
                        "properties": {
                          "labels": {
                            "type": "object",
                            "properties": {
                              ".*": {
                                "type": "string"
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "output_dir": {
                        "type": "string"
                      },
                      "scrub": {
                        "type": "object",
                        "properties": {
                          "regex": {
                            "type": "string"
                          },
                          "replace": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "regex",
                          "replace"
                        ]
                      },
                      "timeout_seconds": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "Filters"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "namespace"
                ]
              },
              "docker.stack-service-ls": {
                "description": "Collect information about services in a swarm stack",
                "examples": [
                  {
                    "output_dir": "/swarm/stacks/cooltool/services",
                    "description": "Logs from services in the cooltool stack",
                    "namespace": "cooltool-core"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "service_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "namespace": {
                    "description": "The stack's namespace",
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "service_list_options": {
                    "description": "Options as would be passed to `docker stack services",
                    "type": "object",
                    "properties": {
                      "Filters": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "array"
                          }
                        }
                      },
                      "description": {
                        "type": "string"
                      },
                      "include_empty": {
                        "type": "boolean"
                      },
                      "meta": {
                        "type": "object",
                        "properties": {
                          "labels": {
                            "type": "object",
                            "properties": {
                              ".*": {
                                "type": "string"
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "output_dir": {
                        "type": "string"
                      },
                      "scrub": {
                        "type": "object",
                        "properties": {
                          "regex": {
                            "type": "string"
                          },
                          "replace": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "regex",
                          "replace"
                        ]
                      },
                      "timeout_seconds": {
                        "type": "integer"
                      }
                    },
                    "required": []
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "namespace"
                ]
              },
              "docker.stack-service-ps": {
                "description": "Collect information about the tasks running in a service",
                "examples": [
                  {
                    "output_dir": "/swarm/stacks/cooltool/service-tasks",
                    "description": "Tasks owned by services in the cooltool stack",
                    "namespace": "cooltool-core",
                    "task_list_options": {
                      "Filters": {
                        "label": [
                          "com.cooltool.tier=www",
                          "com.cooltool.tier=api"
                        ]
                      }
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "service_ps.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "namespace": {
                    "description": "The stack's namespace",
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "task_list_options": {
                    "description": "Options as would be passed to `docker stack ps`",
                    "type": "object",
                    "properties": {
                      "Filters": {
                        "type": "object",
                        "patternProperties": {
                          ".*": {
                            "type": "array"
                          }
                        }
                      }
                    },
                    "required": []
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "namespace"
                ]
              },
              "docker.stack-task-logs": {
                "description": "Collect logs from a docker swarm task",
                "examples": [
                  {
                    "output_dir": "/swarm/stacks/cooltool/service-logs",
                    "description": "Logs from services in the cooltool stack",
                    "namespace": "cooltool-core",
                    "task_list_options": {
                      "Filters": {
                        "name": [
                          "redis.1"
                        ]
                      }
                    }
                  },
                  {
                    "output_dir": "/swarm/stacks/cooltool/service-logs",
                    "description": "Logs from services in the cooltool stack",
                    "namespace": "cooltool-core",
                    "labels": {}
                  },
                  {
                    "output_dir": "/swarm/stacks/cooltool/service-logs",
                    "description": "Logs from services in the cooltool stack",
                    "namespace": "cooltool-core",
                    "labels": {
                      "com.replicated.excludelogs": "false",
                      "abc": "xyz",
                      "abc2": ""
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.TaskId}}.stdout",
                    "description": "The stdout output. Will generate this file for each matched service task"
                  },
                  {
                    "path": "{{.TaskId}}.stderr",
                    "description": "The stderr output. Will generate this file for each matched service task"
                  }
                ],
                "type": "object",
                "properties": {
                  "container_logs_options": {
                    "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)",
                    "type": "object",
                    "properties": {
                      "Details": {
                        "type": "boolean"
                      },
                      "Follow": {
                        "type": "boolean"
                      },
                      "ShowStderr": {
                        "type": "boolean"
                      },
                      "ShowStdout": {
                        "type": "boolean"
                      },
                      "Since": {
                        "type": "string"
                      },
                      "Tail": {
                        "type": "string"
                      },
                      "Timestamps": {
                        "type": "boolean"
                      },
                      "Until": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ShowStdout",
                      "ShowStderr",
                      "Since",
                      "Until",
                      "Timestamps",
                      "Follow",
                      "Tail",
                      "Details"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "labels": {
                    "description": "A set of labels that must be present for the logs to be included",
                    "type": "object",
                    "patternProperties": {
                      ".*": {
                        "type": "string"
                      }
                    },
                    "properties": {
                      ".*": {
                        "type": "string"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "namespace": {
                    "description": "The stack namespace",
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "task_list_options": {
                    "description": "Options for filtering stack tasks",
                    "type": "object",
                    "properties": {
                      "Filters": {
                        "type": "object",
                        "patternProperties": {
                          ".*": {
                            "type": "array"
                          }
                        }
                      }
                    },
                    "required": []
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "namespace"
                ]
              },
              "docker.task-logs": {
                "description": "Collect logs from a docker swarm task",
                "examples": [
                  {
                    "output_dir": "/swarm/tasks/logs",
                    "description": "Logs from cooltool tasks in the www and api tiers",
                    "task_list_options": {
                      "Filters": {
                        "label": [
                          "com.cooltool.tier=www",
                          "com.cooltool.tier=api"
                        ]
                      }
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.TaskId}}.stdout",
                    "description": "The stdout output. Will generate this file for each matched service task"
                  },
                  {
                    "path": "{{.TaskId}}.stderr",
                    "description": "The stderr output. Will generate this file for each matched service task"
                  }
                ],
                "type": "object",
                "properties": {
                  "container_logs_options": {
                    "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)",
                    "type": "object",
                    "properties": {
                      "Details": {
                        "type": "boolean"
                      },
                      "Follow": {
                        "type": "boolean"
                      },
                      "ShowStderr": {
                        "type": "boolean"
                      },
                      "ShowStdout": {
                        "type": "boolean"
                      },
                      "Since": {
                        "type": "string"
                      },
                      "Tail": {
                        "type": "string"
                      },
                      "Timestamps": {
                        "type": "boolean"
                      },
                      "Until": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "ShowStdout",
                      "ShowStderr",
                      "Since",
                      "Until",
                      "Timestamps",
                      "Follow",
                      "Tail",
                      "Details"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "id": {
                    "description": "The id of a single task",
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "task_list_options": {
                    "description": "Options for filtering stack tasks",
                    "type": "object",
                    "properties": {
                      "Filters": {
                        "type": "object",
                        "patternProperties": {
                          ".*": {
                            "type": "array"
                          }
                        }
                      }
                    },
                    "required": []
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "docker.task-ls": {
                "description": "List docker swarm tasks",
                "examples": [
                  {
                    "output_dir": "/swarm/tasklist",
                    "Filters": {
                      "name": [
                        "cooltool-api-",
                        "cooltool-backend-"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "task_ls.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "Filters": {
                    "description": "Filters for tasks",
                    "type": "object",
                    "patternProperties": {
                      ".*": {
                        "type": "array"
                      }
                    },
                    "properties": {
                      ".*": {
                        "type": "array"
                      }
                    }
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "docker.version": {
                "description": "Get the version of the docker server",
                "examples": [
                  {
                    "output_dir": "/docker/version"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "docker_version.json",
                    "description": "JSON output"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "include_empty": {
                "type": "boolean"
              },
              "journald.logs": {
                "description": "Collect logs from journald",
                "examples": [
                  {
                    "output_dir": "/system/journald/cooltool-api",
                    "reverse": true,
                    "unit": "cooltool-api",
                    "since": "2018-01-01"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "logs.raw",
                    "description": "The raw output the `journald` logs for the unit"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "reverse": {
                    "description": "Store logs in reverse chronological order",
                    "type": "boolean"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "since": {
                    "description": "Since date for log collection",
                    "type": "string"
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  },
                  "unit": {
                    "description": "Systemd unit from which to collect logs",
                    "type": "string"
                  }
                },
                "required": [
                  "unit",
                  "output_dir"
                ]
              },
              "kubernetes.api-versions": {
                "description": "The API versions of the Kubernetes cluster",
                "examples": [
                  {
                    "output_dir": "/kubernetes/"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "api_versions.json",
                    "description": "A json file holding a list of the API versions"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "output_dir"
                ]
              },
              "kubernetes.cluster-info": {
                "description": "Get the Kubernetes cluster info",
                "examples": [
                  {
                    "output_dir": "/kubernetes/"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "cluster_info.json",
                    "description": "A json file holding the Kubernetes cluster info"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "output_dir"
                ]
              },
              "kubernetes.container-cp": {
                "description": "Collect a file or directory from one or more kubernetes pods and containers. If the container name is not specified, files will be collected from all containers within the pods.",
                "examples": [
                  {
                    "output_dir": "/kubernetes/all-api-pod-logs",
                    "pod": "cooltool-api-110212121-ab123ef",
                    "namespace": "default",
                    "src_path": "/logs/app.log",
                    "timeout_seconds": 30
                  },
                  {
                    "output_dir": "/kubernetes/api-pod-logs",
                    "pod": "cooltool-api-110212121-ab123ef",
                    "container": "api",
                    "namespace": "default",
                    "src_path": "/logs/app.log",
                    "timeout_seconds": 30
                  },
                  {
                    "output_dir": "/kubernetes/deployment-pod-logs",
                    "pod_list_options": {
                      "labelSelector": "run=api"
                    },
                    "src_path": "/logs/"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.Namespace}}/{{.Pod}}/{{.Container}}/",
                    "description": "A directory holding files copied from the pod and containers specified. Each pod and container will have a directory. Used when neither a pod name or a namespace is provided."
                  },
                  {
                    "path": "{{.Pod}}/{{.Container}}/",
                    "description": "A directory holding files copied from the pod and containers specified. Each pod and container will have a directory. Used when a pod name is not provided."
                  },
                  {
                    "path": "{{.Namespace}}/{{.Container}}/",
                    "description": "A directory holding files copied from the pod and containers specified. Each container will have a directory. Used when a pod name is provided, but a namespace is not."
                  },
                  {
                    "path": "{{.Container}}/",
                    "description": "A directory holding files copied from the pod and containers specified. Each container will have a directory. Used when a pod name is provided."
                  }
                ],
                "type": "object",
                "properties": {
                  "container": {
                    "description": "The Kubernetes container. If omitted, files will be copied from all containers in matched pods",
                    "example": "api",
                    "examples": [
                      "api"
                    ],
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "namespace": {
                    "description": "The Kubernetes namespace. If no namespace is provided, results from all namespaces are included",
                    "example": "default",
                    "examples": [
                      "",
                      "default",
                      "kube-system"
                    ],
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "pod": {
                    "description": "The Kubernetes pod",
                    "example": "cooltool-api-110212121-ab123ef",
                    "examples": [
                      "cooltool-api-110212121-ab123ef"
                    ],
                    "type": "string"
                  },
                  "pod_list_options": {
                    "description": "The Kubernetes pod query options (used when querying for a label selector)",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "type": "string"
                      },
                      "continue": {
                        "type": "string"
                      },
                      "fieldSelector": {
                        "type": "string"
                      },
                      "includeUninitialized": {
                        "type": "boolean"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "labelSelector": {
                        "description": "The Kubernetes pod label selector to query by",
                        "example": "env",
                        "examples": [
                          "env=test",
                          "env=production",
                          "env=production,type=reporting",
                          "type in (reporting, metrics)"
                        ],
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "resourceVersion": {
                        "type": "string"
                      },
                      "timeoutSeconds": {
                        "type": "integer"
                      },
                      "watch": {
                        "type": "boolean"
                      }
                    }
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "src_path": {
                    "description": "The path to copy from within the container",
                    "example": "/logs/",
                    "examples": [
                      "/logs/",
                      "/logs/api.log"
                    ],
                    "type": "string"
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "output_dir",
                  "src_path"
                ],
                "oneOf": [
                  {
                    "required": [
                      "pod"
                    ]
                  },
                  {
                    "required": [
                      "pod_list_options"
                    ]
                  }
                ]
              },
              "kubernetes.logs": {
                "description": "Collect the logs for one or more kubernetes pods",
                "examples": [
                  {
                    "output_dir": "/kubernetes/api-pod-logs",
                    "pod": "cooltool-api-110212121-ab123ef",
                    "namespace": "default",
                    "pod_log_options": {
                      "timestamps": true,
                      "sinceSeconds": 1000000,
                      "limitBytes": 1000000000
                    },
                    "timeout_seconds": 30
                  },
                  {
                    "output_dir": "/kubernetes/api-pod-logs",
                    "namespace": "default",
                    "pod_log_options": {
                      "timestamps": true,
                      "sinceSeconds": 1000000,
                      "limitBytes": 1000000000
                    },
                    "list_options": {
                      "labelSelector": "type=reporting"
                    },
                    "timeout_seconds": 30
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "{{.Namespace}}/{{.Name}}.log",
                    "description": "Logs pulled from Kubernetes pod. Kubernetes pulls logs from stdout/stderr into one output file. If a label selector is provided, it will create multiple log files following the same format. Used when a namespace is not provided."
                  },
                  {
                    "path": "{{.Name}}.log",
                    "description": "Logs pulled from Kubernetes pod. Kubernetes pulls logs from stdout/stderr into one output file. If a label selector is provided, it will create multiple log files following the same format."
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "list_options": {
                    "description": "The Kubernetes pod query options (used when querying for a label selector)",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "type": "string"
                      },
                      "continue": {
                        "type": "string"
                      },
                      "fieldSelector": {
                        "type": "string"
                      },
                      "includeUninitialized": {
                        "type": "boolean"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "labelSelector": {
                        "description": "The Kubernetes pod label selector to query logs by",
                        "example": "env",
                        "examples": [
                          "env=test",
                          "env=production",
                          "env=production,type=reporting",
                          "type in (reporting, metrics)"
                        ],
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "resourceVersion": {
                        "type": "string"
                      },
                      "timeoutSeconds": {
                        "type": "integer"
                      },
                      "watch": {
                        "type": "boolean"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "namespace": {
                    "description": "The Kubernetes namespace. If no namespace is provided, results from all namespaces are included",
                    "example": "default",
                    "examples": [
                      "",
                      "default",
                      "kube-system"
                    ],
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "pod": {
                    "description": "The Kubernetes pod",
                    "example": "cooltool-api-110212121-ab123ef",
                    "examples": [
                      "cooltool-api-110212121-ab123ef"
                    ],
                    "type": "string"
                  },
                  "pod_log_options": {
                    "description": "The Kubernetes pod log options",
                    "example": {
                      "timestamps": true
                    },
                    "examples": [
                      {
                        "timestamps": true
                      }
                    ],
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "type": "string"
                      },
                      "container": {
                        "type": "string"
                      },
                      "follow": {
                        "type": "boolean"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "limitBytes": {
                        "type": "integer"
                      },
                      "previous": {
                        "type": "boolean"
                      },
                      "sinceSeconds": {
                        "type": "integer"
                      },
                      "sinceTime": {
                        "type": "object"
                      },
                      "tailLines": {
                        "type": "integer"
                      },
                      "timestamps": {
                        "type": "boolean"
                      }
                    }
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "output_dir"
                ],
                "oneOf": [
                  {
                    "required": [
                      "pod"
                    ]
                  },
                  {
                    "required": [
                      "list_options"
                    ]
                  }
                ]
              },
              "kubernetes.resource-list": {
                "description": "Collect a list of resources managed by the cluster",
                "examples": [
                  {
                    "output_dir": "/kubernetes/resources/deployments",
                    "namespace": "default",
                    "kind": "deployments"
                  },
                  {
                    "output_dir": "/kubernetes/resources/services",
                    "kind": "svc"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "resource.json",
                    "description": "Logs pulled from Kubernetes pod. Kubernetes pulls logs from stdout/stderr into one output file. If a label selector is provided, it will create multiple log files following the same format."
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "kind": {
                    "description": "The Kubernetes resource kind, as would be passed to `kubectl get`",
                    "examples": [
                      "deployments",
                      "replicasets"
                    ],
                    "pattern": "^(componentstatuses|cs|configmaps|cm|daemonsets|ds|deployments|deploy|endpoints|ep|events|ev|horizontalpodautoscalers|hpa|ingresses|ing|jobs|limitranges|limits|namespaces|ns|networkpolicies|netpol|nodes|no|persistentvolumeclaims|pvc|persistentvolumes|pv|pods|po|podsecuritypolicies|psp|podtemplates|replicasets|rs|replicationcontrollers|rc|resourcequotas|quota|storageclasses|statefulsets|serviceaccounts|sa|services|svc|secrets)$",
                    "type": "string"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "namespace": {
                    "description": "The Kubernetes namespace. If no namespace is provided, results from all namespaces are included",
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "resource_list_options": {
                    "description": "An instance of metav1.ListOptions",
                    "type": "object",
                    "properties": {
                      "apiVersion": {
                        "type": "string"
                      },
                      "continue": {
                        "type": "string"
                      },
                      "fieldSelector": {
                        "type": "string"
                      },
                      "includeUninitialized": {
                        "type": "boolean"
                      },
                      "kind": {
                        "type": "string"
                      },
                      "labelSelector": {
                        "type": "string"
                      },
                      "limit": {
                        "type": "integer"
                      },
                      "resourceVersion": {
                        "type": "string"
                      },
                      "timeoutSeconds": {
                        "type": "integer"
                      },
                      "watch": {
                        "type": "boolean"
                      }
                    }
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "kind"
                ]
              },
              "kubernetes.version": {
                "description": "Get the kubernetes version",
                "examples": [
                  {
                    "output_dir": "/kubernetes/"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "server_version.json",
                    "description": "A json file containing the version information of the Kubernetes cluster"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "meta": {
                "description": "Can be used to organize and identify analyze elements",
                "type": "object",
                "properties": {
                  "labels": {
                    "description": "Key,value pairs used to organize and identify analyze elements",
                    "patternProperties": {
                      ".*": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Name used to organize and identify analyze elements",
                    "type": "string"
                  }
                }
              },
              "os.hostname": {
                "description": "Get the hostname",
                "examples": [
                  {
                    "output_dir": "/system/hostname"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "stderr",
                    "description": "The stdout from the command"
                  },
                  {
                    "path": "stdout",
                    "description": "The stdin from the command"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                }
              },
              "os.http-request": {
                "description": "Collect information about the response from making an HTTP request",
                "examples": [
                  {
                    "output_dir": "/system/ping-ip",
                    "url": "https://api.replicated.com/market/v1/echo/ip",
                    "method": "get",
                    "header": {
                      "User-Agent": [
                        "cooltool/supportbundle 0.11.1"
                      ]
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "body",
                    "description": "The response body"
                  }
                ],
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The request body",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "header": {
                    "description": "One or more headers to send",
                    "patternProperties": {
                      ".*": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "type": "object",
                    "properties": {
                      ".*": {
                        "type": "array"
                      }
                    }
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "insecure": {
                    "description": "Set to `true` to skip TLS verification",
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "method": {
                    "description": "HTTP request method",
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  },
                  "url": {
                    "description": "The HTTP request URL",
                    "type": "string"
                  }
                },
                "required": [
                  "url",
                  "method"
                ]
              },
              "os.loadavg": {
                "description": "Collect information about CPU load",
                "examples": [
                  {
                    "output_dir": "/system/load"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "contents",
                    "description": "The raw loadavg info ",
                    "examples": [
                      "0.77 0.93 0.90 10/947 12"
                    ]
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "template": {
                    "description": "(Optional) a template for the human-readable output",
                    "type": "string"
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": []
              },
              "os.read-file": {
                "description": "Read a file from the filesystem",
                "examples": [
                  {
                    "output_dir": "/files/etc/bigtool-conf",
                    "filepath": "/etc/bigtool.conf"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "bigtool.conf",
                    "description": "The file contents",
                    "examples": [
                      "{\"setting1\": true, \"setting2\": false}"
                    ]
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "filepath": {
                    "description": "The file path on the host. If running Support Bundle via docker, this will work, but symlinks are not supported",
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "filepath"
                ]
              },
              "os.run-command": {
                "description": "Run a command. Will be run in the support bundle container if `docker run replicated/support-bundle` is used. To run in a custom container, use `docker.run` instead",
                "examples": [
                  {
                    "output_dir": "/system/commands/ping-google",
                    "name": "date"
                  },
                  {
                    "output_dir": "/system/commands/ping-google",
                    "name": "cat",
                    "args": [
                      "/etc/os-release"
                    ]
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "stderr",
                    "description": "The standard error of the command",
                    "examples": [
                      "Usage: ping [-aAbBdDfhLnOqrRUvV] [-c count] [-i interval] [-I interface]\n [-m mark] [-M pmtudisc_option] [-l preload] [-p pattern] [-Q tos]\n [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option]\n [-w deadline] [-W timeout] [hop1 ...] destination"
                    ]
                  },
                  {
                    "path": "stdout",
                    "description": "The standard output of the command",
                    "examples": [
                      "PING google.com (172.217.11.78) 56(84) bytes of data.\n 64 bytes from lax17s34-in-f14.1e100.net (172.217.11.78): icmp_seq=1 ttl=54 time=203 ms\n 64 bytes from lax17s34-in-f14.1e100.net (172.217.11.78): icmp_seq=2 ttl=54 time=28.0 ms\n 64 bytes from lax17s34-in-f14.1e100.net (172.217.11.78): icmp_seq=3 ttl=54 time=130 ms\n"
                    ]
                  }
                ],
                "type": "object",
                "properties": {
                  "args": {
                    "description": "The command arguments",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "type": "string"
                  },
                  "dir": {
                    "description": "The working directory of the command",
                    "type": "string"
                  },
                  "env": {
                    "description": "Specifies additional environment variables",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "name": {
                    "description": "The command to run",
                    "type": "string"
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "os.uptime": {
                "description": "Collect information about the system's uptime",
                "examples": [
                  {
                    "output_dir": "/system/uptime"
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "contents",
                    "description": "The contents of the uptime file"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "template": {
                    "description": "Template for the human-readable output",
                    "type": "string"
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "output_dir"
                ]
              },
              "output_dir": {
                "type": "string"
              },
              "retraced.events": {
                "description": "Collect Audit Log events from a running Retraced instance",
                "examples": [
                  {
                    "output_dir": "/audit/events",
                    "api_endpoint": "https://auditlogs.mycorp.internal:8080",
                    "api_token": "aef342f32f22f3edf1f1f3f3ef",
                    "project_id": "f3edf1f1f3f3efaef342f32f22"
                  },
                  {
                    "output_dir": "/audit/events",
                    "api_endpoint": "https://auditlogs.mycorp.internal:8080",
                    "api_token": "aef342f32f22f3edf1f1f3f3ef",
                    "project_id": "f3edf1f1f3f3efaef342f32f22",
                    "insecure": true,
                    "timeout_seconds": 10,
                    "mask": {
                      "Action": true,
                      "Description": true,
                      "ActorID": true,
                      "ActorName": true,
                      "CanonicalTime": true
                    },
                    "query": {
                      "CRUD": "c,u,d"
                    }
                  }
                ],
                "_ext_outputs": [
                  {
                    "path": "audit_events.csv",
                    "description": "The audit events in CSV format"
                  }
                ],
                "type": "object",
                "properties": {
                  "api_endpoint": {
                    "description": "The location of the Audit Logs API endpoint in the form `http(s)://<host>:<port>`",
                    "type": "string",
                    "required": []
                  },
                  "api_token": {
                    "description": "An API token for communicating with the audit log instance",
                    "type": "string",
                    "required": []
                  },
                  "description": {
                    "type": "string"
                  },
                  "include_empty": {
                    "type": "boolean"
                  },
                  "insecure": {
                    "description": "Set to `true` to skip SSL verification on the endpoint",
                    "type": "boolean",
                    "required": []
                  },
                  "mask": {
                    "description": "A mask to determine what fields to include in the output file, as in https://github.com/retracedhq/retraced-go/blob/master/graphql.go#L160",
                    "type": "object",
                    "properties": {
                      "Action": {
                        "type": "boolean"
                      },
                      "ActorFields": {
                        "type": "boolean"
                      },
                      "ActorHref": {
                        "type": "boolean"
                      },
                      "ActorID": {
                        "type": "boolean"
                      },
                      "ActorName": {
                        "type": "boolean"
                      },
                      "CRUD": {
                        "type": "boolean"
                      },
                      "CanonicalTime": {
                        "type": "boolean"
                      },
                      "Component": {
                        "type": "boolean"
                      },
                      "Country": {
                        "type": "boolean"
                      },
                      "Created": {
                        "type": "boolean"
                      },
                      "Description": {
                        "type": "boolean"
                      },
                      "DisplayMarkdown": {
                        "type": "boolean"
                      },
                      "Fields": {
                        "type": "boolean"
                      },
                      "GroupID": {
                        "type": "boolean"
                      },
                      "GroupName": {
                        "type": "boolean"
                      },
                      "ID": {
                        "type": "boolean"
                      },
                      "IsAnonymous": {
                        "type": "boolean"
                      },
                      "IsFailure": {
                        "type": "boolean"
                      },
                      "LocSubdiv1": {
                        "type": "boolean"
                      },
                      "LocSubdiv2": {
                        "type": "boolean"
                      },
                      "Raw": {
                        "type": "boolean"
                      },
                      "Received": {
                        "type": "boolean"
                      },
                      "SourceIP": {
                        "type": "boolean"
                      },
                      "TargetFields": {
                        "type": "boolean"
                      },
                      "TargetHref": {
                        "type": "boolean"
                      },
                      "TargetID": {
                        "type": "boolean"
                      },
                      "TargetName": {
                        "type": "boolean"
                      },
                      "TargetType": {
                        "type": "boolean"
                      },
                      "Version": {
                        "type": "boolean"
                      }
                    },
                    "required": []
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "properties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "output_dir": {
                    "type": "string"
                  },
                  "project_id": {
                    "description": "The Audit Log Project ID",
                    "type": "string",
                    "required": []
                  },
                  "query": {
                    "description": "A structured query for filtering events, as in https://github.com/retracedhq/retraced-go/blob/master/graphql.go#L16",
                    "type": "object",
                    "properties": {
                      "Action": {
                        "type": "string"
                      },
                      "ActorID": {
                        "type": "string"
                      },
                      "ActorName": {
                        "type": "string"
                      },
                      "CRUD": {
                        "type": "string"
                      },
                      "CreatedEnd": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "CreatedStart": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "Description": {
                        "type": "string"
                      },
                      "Location": {
                        "type": "string"
                      },
                      "ReceivedEnd": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "ReceivedStart": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": []
                  },
                  "scrub": {
                    "type": "object",
                    "properties": {
                      "regex": {
                        "type": "string"
                      },
                      "replace": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "regex",
                      "replace"
                    ]
                  },
                  "timeout_seconds": {
                    "type": "integer"
                  }
                },
                "required": [
                  "output_dir",
                  "api_token",
                  "api_endpoint",
                  "project_id"
                ]
              },
              "scrub": {
                "type": "object",
                "properties": {
                  "regex": {
                    "type": "string"
                  },
                  "replace": {
                    "type": "string"
                  }
                },
                "required": [
                  "regex",
                  "replace"
                ]
              },
              "timeout_seconds": {
                "type": "integer"
              }
            },
            "required": []
          }
        }
      }
    },
    "lifecycle": {
      "description": "`lifecycle` can be used to customize the end-customer's experience when generating/uploading support bundles",
      "type": "array",
      "items": {
        "description": "`lifecycle` can be used to customize the end-customer's experience when generating/uploading support bundles",
        "type": "object",
        "properties": {
          "generate": {
            "description": "Adds a step that will generate a support bundle. It has one argument, use_defaults",
            "examples": [
              {
                "use_defaults": true
              }
            ],
            "type": "object",
            "properties": {
              "use_defaults": {
                "description": "Whether to include the default support bundle files - cpu info, docker ps, etc",
                "type": "boolean"
              }
            }
          },
          "message": {
            "description": "Adds a step to print a message to the end customer",
            "examples": [
              {
                "contents": "This process will collect a number of files from the host system to help you debug your problem"
              }
            ],
            "type": "object",
            "properties": {
              "contents": {
                "description": "is the message",
                "type": "string"
              }
            },
            "required": [
              "contents"
            ]
          },
          "notes": {
            "description": "Adds a step to prompt the end customer to enter a note to be uploaded with the support bundle",
            "examples": [
              {
                "prompt": "Please enter a note for the support bundle: "
              }
            ],
            "type": "object",
            "properties": {
              "prompt": {
                "description": "the message prompt to display to the end customer for entering a note",
                "type": "string"
              }
            }
          },
          "upload": {
            "description": "Adds a step in which the end customer can upload a bundle to https://console.replicated.com for review by the vendor",
            "examples": [
              {
                "prompt": {
                  "message": "Would you like to upload your generated support bundle for review? - ",
                  "accept": "Bundle uploaded! SuperGoodTool support will get back to you within 24 hours",
                  "decline": "Bundle was not uploaded, please send your bundle to SuperGoodTool support",
                  "default": true
                }
              }
            ],
            "type": "object",
            "properties": {
              "prompt": {
                "description": "Allows configuring an interactive prompt for the user to confirm before uploading",
                "type": "object",
                "properties": {
                  "accept": {
                    "description": "A message to display if the user accepts the upload prompt",
                    "type": "string"
                  },
                  "decline": {
                    "description": "A message to display if the user declines the upload prompt",
                    "type": "string"
                  },
                  "default": {
                    "description": "The default answer to the prompt",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "Message to display before prompting",
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "prompt"
            ]
          }
        }
      }
    }
  }
}
