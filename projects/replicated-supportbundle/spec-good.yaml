---
specs:

# get the ca cert from inside the container, by copying the file
 - docker.container-cp:
     src_path: /etc/pki/secrets/ca.crt
     container: "sgt-pki-manager"
     description: "The local CA Certificate"
     output_dir: /pki/ca-cert

# also grab the public key, capturing the stdout from `openssl`
 - docker.exec:
     container: "sgt-pki-manager"
     exec_config:
       Cmd: ["openssl", "x509", "-pubkey", "-noout", "-in", "/etc/pki/secrets/ca.crt"]
     description: "The RSA public Key of the X509 cert"
     output_dir: /pki/ca-pubkey
     timeout_seconds: 100


# do a docker inspect for all the containers we care about
 - docker.container-inspect:
     container_list_options:
       All: true
       Filters:
         com.superbigtool.onprem: true
     description: "The docker inspect for all the containers labeled with com.superbigtool.onprem"
     output_dir: /docker/inspect

# collect the docker logs for all the containers we care about
 - docker.logs:
     container_list_options:
       All: true
       Filters:
         com.superbigtool.onprem: true
     container_logs_options:
       Timestamps: true
     description: "The docker logs for all the containers labeled with com.superbigtool.onprem"
     output_dir: /docker/logs
     timeout_seconds: 100

# get the `docker ps` for containers we care about
 - docker.ps:
     All: true
     description: "The docker ps for all the containers labeled with com.superbigtool.onprem"
     output_dir: /docker/ps

# run a container with `--net host` to get info about the host network
 - docker.run:
     container_create_config:
       Config:
         Image: "debian:latest"
         Cmd: ["ip", "addr", "show"]
       HostConfig:
         NetworkMode: "host"
         AutoRemove: true
     description: "The `ip addr show` for the host network"
     output_dir: /docker/run/hostnet

# grab /proc/meminfo
 - os.read-file:
     filepath: /proc/meminfo
     description: "meminfo"
     output_dir: /os/proc/meminfo

# grab /proc/meminfo
 - os.read-file:
     filepath: /proc/cpuinfo
     description: "cpuinfo"
     output_dir: /os/proc/cpuinfo
     include_empty: true

 - docker.service-logs:
     service: "my_service"
     output_dir: /swarm/service-logs/myservice

 - docker.stack-service-logs:
     output_dir: /docker/my-stack
     namespace: replicated
     labels: {"abc":"xyz"}

 - docker.stack-task-logs:
     output_dir: /docker/my-stack
     namespace: replicated
     labels:
       abc: xyz

 - kubernetes.container-cp:
    output_dir: /kubernetes/files
    pod_list_options:
      labelSelector: "run=my-run"
    namespace: default
    src_path: /etc/os-release
    container: my-run

 - kubernetes.container-cp:
    output_dir: /kubernetes/otherfiles
    pod_list_options:
      labelSelector: "run=my-run"
    src_path: /etc/

 - kubernetes.container-cp:
    output_dir: /kubernetes/moreotherfiles
    pod: mypodname
    container: mycontainername
    src_path: /etc/

 - kubernetes.api-versions:
    output_dir: /kubernetes/
 - kubernetes.cluster-info:
    output_dir: /kubernetes/
 - kubernetes.version:
    output_dir: /kubernetes/
 - kubernetes.logs:
    output_dir: /kubernetes/logs
    list_options:
      labelSelector: "run=echosleep"
    namespace: default
 - kubernetes.resource-list:
    output_dir: /kubernetes/resource-list/pods
    kind: deploy
    group_version: apps/v1beta1
    namespace: default


lifecycle:
  - message:
      contents: generating bundle...
  - generate:
      use_defaults: true
  - upload:
      prompt:
        message: Do you want to upload directly?
        default: true
        accept: Thanks! Superbigtool will get back to you within 24 hours.
        decline: Send your support bundle located at {{.BundlePath}} to Superbigtool



collect:
  v1:

    - kubernetes.resource-list:
        kind: nodes
      output_dir: /kubernetes/resource-list/nodes
      meta:
        labels:
          analyze: kubernetes-resource-list-nodes

    - kubernetes.version: {}
      output_dir: /kubernetes/version
      meta:
        labels:
          analyze: kubernetes-version

analyze:
  v1:

    - selinux.notenforcing: {}
      collect_refs:
        - selector:
            analyze: cmd-selinux-status

    - docker.version:
        server_version_minimum: 17.06.2
      collect_refs:
        - selector:
            analyze: docker-version

    - kubernetes.total-memory:
        minimum: 20Gi
      collect_refs:
        - selector:
            analyze: kubernetes-resource-list-nodes

    - kubernetes.version:
        semver_minimum: 1.10.0
      collect_refs:
        - selector:
            analyze: kubernetes-version

    - raw:
        conditions:
          - eval:
              operator: and
              statements:
                - '{{repl .Empty}}'
              variables:
                - Empty: '{{repl not .Nodes}}'
            severity: error
            message: >-
              Failed to detect Kubernetes total memory
          - eval:
              operator: and
              statements:
                - '{{repl lt (atoi .Memory) (atoi .Min)}}'
              variables:
                - Memory: '{{repl jq .Nodes ".items[].status.capacity.memory" | jqMessagesToStringSlice | sumQuantities}}'
                - Min: '{{repl parseQuantity "10Gi"}}'
            severity: error
            message: >-
              Total memory for your Kubernetes cluster {{repl (atoi .Memory) | formatQuantity}}B is less than the minimum
              required memory of 10GiB
      message: Kubernetes total memory must be at least 10GiB
      collect_refs:
        - ref: Nodes
          selector:
            analyze: kubernetes-resource-list-nodes
